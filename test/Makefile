# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

export LANG=en_US.UTF-8

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = gtest

# The directory where the user files resides.
USER_DIR = ..

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include -I$(USER_DIR)/include -DGTEST_USE_OWN_TR1_TUPLE

# Flags passed to the C++ compiler.
CXXFLAGS += -g -W -Wall -Wextra -std=c++11

# Flags passed to the linker.
LDFLAGS += -lboost_thread -lboost_system -lpthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = callback_test \
	url_test \
	promise_test \
	when_all_test \
	concurrent_map_test \
	loading_cache_test \
	singleton_test \
	hazard_pointer_test

HEADER_TESTS = bind_header_test.o \
	callback_header_test.o \
	promise_header_test.o \
	url_header_test.o \
	when_all_header_test.o \
	wsd_assert_header_test.o \
	wsd_magic_header_test.o \
	concurrent_map_header_test.o \
	loading_cache_header_test.o \
	singleton_header_test.o

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS) $(HEADER_TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o core *~ .*.d

test : $(TESTS)
	for each in $(TESTS); \
	do \
		./$$each; \
	done

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) -I$(GTEST_DIR)/include -I$(GTEST_DIR) $(CPPFLAGS) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) -I$(GTEST_DIR)/include -I$(GTEST_DIR) $(CPPFLAGS) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

callback_test : callback_test.o gtest_main.a es_test.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ $(LDFLAGS) -o $@

url_test : url_test.o gtest_main.a $(USER_DIR)/src/libwsd.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ $(LDFLAGS) -o $@

promise_test : promise_test.o gtest_main.a $(USER_DIR)/src/libwsd.a es_test.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ $(LDFLAGS) -o $@

when_all_test : when_all_test.o gtest_main.a $(USER_DIR)/src/libwsd.a es_test.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ $(LDFLAGS) -o $@

concurrent_map_test : concurrent_map_test.o gtest_main.a $(USER_DIR)/src/libwsd.a es_test.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ $(LDFLAGS) -o $@

loading_cache_test : loading_cache_test.o gtest_main.a $(USER_DIR)/src/libwsd.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ $(LDFLAGS) -o $@

singleton_test : singleton_test.o gtest_main.a $(USER_DIR)/src/libwsd.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ $(LDFLAGS) -o $@

hazard_pointer_test : hazard_pointer_test.o gtest_main.a $(USER_DIR)/src/libwsd.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ $(LDFLAGS) -o $@

DEPENDS = $(patsubst %.cc,.%.d,$(wildcard *.cc))

-include $(DEPENDS)

# ---------------------------------------------------------------------------
# Recipes

%.o : %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

.%.d : %.cc
	set -e; \
	$(CXX) -MM $(CPPFLAGS) $< -MF $@
